name: Selenium Browser QA Tests

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:
    inputs:
      qa-engine-tag:
        description: 'Ref from QA engine (Optional)'
      dsp-front-ref:
        description: 'Ref from DSPBACK (Optional)'
      use-gh-env:
        type: boolean
        description: Use dspback .env file stored in GH secrets (vs default in dspback repo)

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Clone QA Engine (Latest)
        uses: actions/checkout@v2
        if: github.event.inputs.qa-engine-tag == ''
        with:
          repository: CUAHSI/QA-AutomationEngine
          path: QA-AutomationEngine
          ref: master
      
      - name: Clone QA Engine by ref = ${{ github.event.inputs.qa-engine-tag }}
        uses: actions/checkout@v2
        if: github.event.inputs.qa-engine-tag != ''
        with:
          repository: CUAHSI/QA-AutomationEngine
          path: QA-AutomationEngine
          ref: ${{ github.event.inputs.qa-engine-tag }}

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        working-directory: QA-AutomationEngine
        run: pip3 install -r requirements.txt

      # https://github.com/SeleniumHQ/selenium/blob/selenium-4.0.0-beta-3/.github/actions/setup-chrome/action.yml
      - name: Prepare Selenium
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qqy
          sudo apt-get -qqy install google-chrome-stable
          CHROME_VERSION=$(google-chrome-stable --version)
          CHROME_FULL_VERSION=${CHROME_VERSION%%.*}
          CHROME_MAJOR_VERSION=${CHROME_FULL_VERSION//[!0-9]}
          sudo rm /etc/apt/sources.list.d/google-chrome.list
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          export CHROMEDRIVER_VERSION=`curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION%%.*}`
          curl -L -O "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip && chmod +x chromedriver && sudo mv chromedriver /usr/local/bin
          chromedriver -version
        shell: bash

      - name: Retrieve base64 from secrets and decode to .env file
        if: github.event.inputs.use-gh-env == 'true'
        env:
          DSP_BACK_ENV_BASE64: ${{ secrets.DSP_BACK_ENV_BASE64 }}
        run: |
          echo $DSP_BACK_ENV_BASE64 | base64 --decode > .env

      - name: Build DSPBack
        run: make build

      - name: Build DSPFront latest
        if: github.event.inputs.dsp-front-ref == ''
        run: make build-dspfront

      - name: Clone DSPFront, ref = ${{ github.event.inputs.dsp-front-ref }}
        uses: actions/checkout@v2
        if: github.event.inputs.dsp-front-ref != ''
        with:
          repository: cznethub/dspfront
          path: dspfront
          ref: ${{ github.event.inputs.dsp-front-ref }}
      
      - name: Build DSPFront, ref = ${{ github.event.inputs.dsp-front-ref }}
        if: github.event.inputs.dsp-front-ref != ''
        run: |
          docker build -t dspfront dspfront

      - name: Startup containers
        run: make up-all-d

      - name: Sleep for 10 seconds
        run: sleep 10s
        shell: bash

      - name: Create Output Dir
        working-directory: QA-AutomationEngine
        run: mkdir output

      - name: Check 200 from DSP
        # Fail fast if dsp isn't up
        working-directory: QA-AutomationEngine
        run: |
          ./hydrotest dsp DspTestSuite.test_base_000001_home_page --headless --browser chrome --base https://localhost 2>&1 | tee -a output/home_page_check.txt
          if grep -rl "FAILED (" ./output >/dev/null; then echo "Failed to connect" && exit 1; fi

      - name: Retrieve base64 from secrets and decode to .env file
        working-directory: QA-AutomationEngine
        env:
          DSP_QA_ENGINE_ENV_BASE64: ${{ secrets.DSP_QA_ENGINE_ENV_BASE64 }}
        run: |
          echo $DSP_QA_ENGINE_ENV_BASE64 | base64 --decode > .env

      - name: Run Tests
        working-directory: QA-AutomationEngine
        run: |
          ./hydrotest dsp DspHydroshareTestSuite --headless --browser chrome --base https://localhost 2>&1 | tee -a output/hydroshare-browser-tests.txt
          ./hydrotest dsp DspExternalTestSuite --headless --browser chrome --base https://localhost 2>&1 | tee -a output/external-browser-tests.txt
          ./hydrotest dsp DspZenodoTestSuite --headless --browser chrome --base https://localhost 2>&1 | tee -a output/zenodo-browser-tests.txt
          ./hydrotest dsp DspEarthchemTestSuite --headless --browser chrome --base https://localhost 2>&1 | tee -a output/earthchem-browser-tests.txt

      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: QA-ARTIFACTS
          path: QA-AutomationEngine/output

      - name: Check whether passing
        working-directory: QA-AutomationEngine/output
        run: |
          if grep -rl -e "FAILED (" -e "ERROR:" . >/dev/null; then grep -rh -e "FAIL:" -e "ERROR:" . && exit 1; else grep -rh "OK (" .; fi
