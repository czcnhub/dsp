# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2022-01-25T22:42:22+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field


class AccessRight(Enum):
    open = 'open'
    embargoed = 'embargoed'


class Type(Enum):
    ContactPerson = 'ContactPerson'
    DataCollector = 'DataCollector'
    DataCurator = 'DataCurator'
    DataManager = 'DataManager'
    Distributor = 'Distributor'
    Editor = 'Editor'
    HostingInstitution = 'HostingInstitution'
    Other = 'Other'
    Producer = 'Producer'
    ProjectLeader = 'ProjectLeader'
    ProjectManager = 'ProjectManager'
    ProjectMember = 'ProjectMember'
    RegistrationAgency = 'RegistrationAgency'
    RegistrationAuthority = 'RegistrationAuthority'
    RelatedPerson = 'RelatedPerson'
    Researcher = 'Researcher'
    ResearchGroup = 'ResearchGroup'
    RightsHolder = 'RightsHolder'
    Sponsor = 'Sponsor'
    Supervisor = 'Supervisor'
    WorkPackageLeader = 'WorkPackageLeader'


class Contributor(BaseModel):
    class Config:
        extra = Extra.forbid

    affiliation: str = Field(
        ...,
        description='Affiliation for the purpose of this specific record.',
        title='Affiliation',
    )
    name: str = Field(
        ...,
        description='Full name of person or organisation. Personal name format: family, given.',
        title='Full name',
    )
    orcid: Optional[str] = Field(
        None, description='ORCID identifier for creator.', title='ORCID'
    )
    type: Type = Field(..., title='Contribution type')


class Creator(BaseModel):
    class Config:
        extra = Extra.forbid

    affiliation: str = Field(
        ...,
        description='Affiliation for the purpose of this specific record.',
        title='Affiliation',
    )
    name: str = Field(
        ...,
        description='Full name of person or organisation. Personal name format: family, given.',
        title='Full name',
    )
    orcid: Optional[str] = Field(
        None, description='ORCID identifier for creator.', title='ORCID'
    )


class FundingItem(BaseModel):
    class Config:
        extra = Extra.forbid

    funding_agency: str = Field(
        ...,
        description='Name of the agency that funded the grant or project.',
        title='Funding agency',
    )
    grant_number: str = Field(
        ...,
        description='A unique numeric or string identifer for the grant or project.',
        title='Grant number or identifier',
    )
    grant_name: str = Field(
        ...,
        description='The name or title of the grant or project.',
        title='Grant name',
    )


class Reference(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_reference: Optional[str] = Field(
        None,
        description='A string providing the full reference for the related item.',
        title='Reference string',
    )


class Relation(Enum):
    isCitedBy = 'isCitedBy'
    cites = 'cites'
    isSupplementTo = 'isSupplementTo'
    isSupplementedBy = 'isSupplementedBy'
    isContinuedBy = 'isContinuedBy'
    continues = 'continues'
    isDescribedBy = 'isDescribedBy'
    describes = 'describes'
    hasMetadata = 'hasMetadata'
    isMetadataFor = 'isMetadataFor'
    isNewVersionOf = 'isNewVersionOf'
    isPreviousVersionOf = 'isPreviousVersionOf'
    isPartOf = 'isPartOf'
    hasPart = 'hasPart'
    isReferencedBy = 'isReferencedBy'
    references = 'references'
    isDocumentedBy = 'isDocumentedBy'
    documents = 'documents'
    isCompiledBy = 'isCompiledBy'
    compiles = 'compiles'
    isVariantFormOf = 'isVariantFormOf'
    isOrignialFormOf = 'isOrignialFormOf'
    isIdenticalTo = 'isIdenticalTo'
    isReviewedBy = 'isReviewedBy'
    reviews = 'reviews'
    isDerivedFrom = 'isDerivedFrom'
    isSourceOf = 'isSourceOf'
    requires = 'requires'
    isRequiredBy = 'isRequiredBy'
    isObsoletedBy = 'isObsoletedBy'
    obsoletes = 'obsoletes'
    isPublishedIn = 'isPublishedIn'


class ResourceType(BaseModel):
    class Config:
        extra = Extra.forbid

    subtype: Optional[str] = Field(
        None, description='Specific resource type.', title='Subtype'
    )
    type: Optional[str] = Field(
        'publication',
        description='General resource type.',
        title='General resource type',
    )


class RelatedIdentifier(BaseModel):
    identifier: str = Field(
        ...,
        description='Identifier of the related publication or dataset.',
        title='Identifier',
    )
    relation: Relation = Field(
        ...,
        description='The type of relationship between this item and the related item.',
        title='Relationship type',
    )
    resource_type: Optional[ResourceType] = Field(
        None, description='Resource type of the related item.', title='Resource type'
    )


class ResourceType1(BaseModel):
    class Config:
        extra = Extra.forbid

    openaire_subtype: Optional[str] = Field(
        None, description='OpenAIRE-specific resource type.', title='OpenAIRE subtype'
    )
    subtype: Optional[str] = Field(
        None, description='Specific resource type.', title='Subtype'
    )
    type: str = Field(
        ..., description='General resource type.', title='General resource type'
    )


class Subject(BaseModel):
    class Config:
        extra = Extra.forbid

    identifier: Optional[str] = Field(
        None,
        description='Subjects term identifier (e.g., a URL).',
        title='Term identifier',
    )
    term: Optional[str] = Field(
        None, description='Subject term value.', title='Subject term'
    )


class UploadType(Enum):
    publication = 'publication'
    poster = 'poster'
    presentation = 'presentation'
    dataset = 'dataset'
    image = 'image'
    video = 'video'
    software = 'software'
    lesson = 'lesson'
    physicalobject = 'physicalobject'
    other = 'other'


class ZenodoDatasetsSchemaForCzNetV100(BaseModel):
    class Config:
        extra = Extra.forbid

    access_conditions: Optional[str] = Field(
        None,
        description='Conditions under which access is given if record is restricted.',
        title='Access conditions',
    )
    access_right: Optional[AccessRight] = Field(
        'open', description='Access right for record.', title='Access right'
    )
    communities: Optional[List[str]] = Field(
        None, description='List of community identifiers.', title='Communities'
    )
    contributors: Optional[List[Contributor]] = Field(
        None, description='Contributors in order of importance.', title='Contributors'
    )
    creators: Optional[List[Creator]] = Field(
        None, description='Creators of record in order of importance.', title='Creators'
    )
    description: str = Field(
        ...,
        description='Description/abstract for record.',
        title='Description/Abstract',
    )
    embargo_date: Optional[str] = Field(
        None,
        description='Embargo date of record (ISO8601 formatted date) - YYYY-MM-DD.',
        title='Embargo date',
    )
    funding: Optional[List[FundingItem]] = Field(
        None,
        description='Source of grants/awards which have funded all or part of this particular record.',
        title='Funding information',
    )
    keywords: Optional[List[str]] = Field(
        None, description='Free text keywords.', min_items=1, title='Keywords'
    )
    license: Optional[Dict[str, Any]] = Field(
        None, description='License for embargoed/open access content.', title='License'
    )
    notes: Optional[str] = Field(
        None, description='Additional notes for record.', title='Additional notes'
    )
    references: Optional[List[Reference]] = Field(
        None,
        description='Raw textual references for related publications and datasets when identifier is not known.',
        title='References',
    )
    related_identifiers: Optional[List[RelatedIdentifier]] = Field(
        None,
        description='Identifiers of related publications and datasets.',
        title='Related identifiers',
    )
    resource_type: Optional[ResourceType1] = Field(
        None, description='Record resource type.', title='Resource type'
    )
    subjects: Optional[List[Subject]] = Field(
        None,
        description='Subjects from a taxonomy or controlled vocabulary.',
        title='Subjects from specific vocabularies',
    )
    title: str = Field(
        ..., description='Descriptive title for the record.', title='Title'
    )
    version: Optional[str] = Field(
        None,
        description='Record version tag. Mostly relevant for software and dataset uploads. Any string will be accepted, but semantically-versioned tag is recommended.',
        title='Version',
    )
    upload_type: Optional[UploadType] = Field(
        'dataset', description='Record upload type.'
    )
