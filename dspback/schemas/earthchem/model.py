# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2023-09-07T17:31:51+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, EmailStr, Field, constr


class Type(Enum):
    Collection = 'Collection'
    Dataset = 'Dataset'
    Image = 'Image'
    InteractiveResource = 'InteractiveResource'
    MovingImage = 'MovingImage'
    PhysicalObject = 'PhysicalObject'
    Service = 'Service'
    Software = 'Software'
    Sound = 'Sound'
    StillImage = 'StillImage'
    Text = 'Text'


class Status(Enum):
    incomplete = 'incomplete'
    submitted = 'submitted'
    published = 'published'


class AdditionalType(Enum):
    Chemistry = 'Chemistry'
    Chemistry_ClumpedIsotope = 'Chemistry:ClumpedIsotope'
    Chemistry_Fluid = 'Chemistry:Fluid'
    Chemistry_Gas = 'Chemistry:Gas'
    Chemistry_Rock = 'Chemistry:Rock'
    Chemistry_Sediment = 'Chemistry:Sediment'
    Geochronology = 'Geochronology'
    Kinetics = 'Kinetics'
    ModelData = 'ModelData'
    Petrography = 'Petrography'
    Petrology = 'Petrology'
    Petrology_Experimental = 'Petrology:Experimental'
    Petrology_Mineral = 'Petrology:Mineral'
    SampleInfo = 'SampleInfo'
    SocialScience = 'SocialScience'
    Other = 'Other'


class Coverage(Enum):
    Global = 'Global'
    Regional__Continents__Oceans_ = 'Regional (Continents, Oceans)'
    Space_Planetary = 'Space/Planetary'


class SpatialCoverage(BaseModel):
    coverage: Coverage = Field(..., title='Spatial Coverage')
    keywords: Optional[List[str]] = Field(
        None,
        description='Provide appropriate geographic keywords for searches. (e.g. Pacific Ocean, Aleutian Islands)',
        title='Geographic Keywords',
    )


class Funder(BaseModel):
    alternateName: Optional[str] = None


class Funding(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder = Field({'alternateName': 'NSF'}, const=True)
    url: str = Field('https://ror.org/021nxhr62', const=True)


class Funder1(BaseModel):
    alternateName: Optional[str] = None


class Funding1(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder1 = Field({'alternateName': 'SLOAN'}, const=True)
    url: str = Field('https://ror.org/052csg198', const=True)


class Funder2(BaseModel):
    alternateName: Optional[str] = None


class Funding2(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder2 = Field({'alternateName': 'DOE'}, const=True)
    url: str = Field('https://ror.org/01bj3aw27', const=True)


class Funder3(BaseModel):
    alternateName: Optional[str] = None


class Funding3(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder3 = Field({'alternateName': 'NASA'}, const=True)
    url: str = Field('https://ror.org/027ka1x80', const=True)


class Funder4(BaseModel):
    alternateName: Optional[str] = None


class Funding4(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder4 = Field({'alternateName': 'ERC'}, const=True)
    url: str = Field('https://ror.org/0472cxd90', const=True)


class Funder5(BaseModel):
    alternateName: Optional[str] = None


class Funding5(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder5 = Field({'alternateName': 'DFG'}, const=True)
    url: str = Field('https://ror.org/018mejw64', const=True)


class Funder6(BaseModel):
    alternateName: Optional[str] = None


class Funding6(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder6 = Field({'alternateName': 'NSFC'}, const=True)
    url: str = Field('https://ror.org/01h0zpd94', const=True)


class Funder7(BaseModel):
    alternateName: Optional[str] = None


class Funding7(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder7 = Field({'alternateName': 'ARC'}, const=True)
    url: str = Field('https://ror.org/05mmh0f86', const=True)


class Funder8(BaseModel):
    alternateName: Optional[str] = None


class Funding8(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder8 = Field({'alternateName': 'RSCF'}, const=True)
    url: str = Field('https://ror.org/03y2gwe85', const=True)


class Funder9(BaseModel):
    alternateName: Optional[str] = None


class Funding9(BaseModel):
    identifier: str = Field(..., title='Award Number')
    funder: Funder9 = Field({'alternateName': 'NERC'}, const=True)
    url: str = Field('https://ror.org/02b5d8509', const=True)


class Funder10(BaseModel):
    alternateName: Optional[str] = 'Other'


class Funding10(BaseModel):
    identifier: str = Field(
        ...,
        description='Please enter other funding sources in the format of: Funding Source Name (012345)',
        title='Funding Source',
    )
    funder: Funder10 = Field(
        {'alternateName': 'Other'},
        const=True,
        description='A person or organization that provides money for a particular purpose',
        title='Funder',
    )


class Cordinate(BaseModel):
    lat: Optional[float] = None
    lon: Optional[float] = None
    alt: Optional[float] = None


class FileResponse(BaseModel):
    fileName: Optional[str] = None
    message: Optional[str] = None


class Type1(Enum):
    Point = 'Point'
    LineString = 'LineString'
    Polygon = 'Polygon'


class Geometry(BaseModel):
    type: Optional[Type1] = None
    cordinates: Optional[List[Cordinate]] = None


class Identifier(BaseModel):
    scheme: Optional[str] = None
    identifier: Optional[str] = None


class AuthorIdentifier(BaseModel):
    scheme: str = Field('ORCID', const=True)
    schemeURI: str = Field('https://orcid.org/', const=True)
    identifier: constr(regex=r'\b\d{4}-\d{4}-\d{4}-\d{3}[0-9X]\b') = Field(
        ..., title='ORCID'
    )


class LicenseItem(BaseModel):
    alternateName: str = Field('CC-BY-NC-SA-3.0', const=True)


class LicenseItem1(BaseModel):
    alternateName: str = Field('CC-BY-4.0', const=True)


class LicenseItem2(BaseModel):
    alternateName: str = Field('CC-BY-SA-4.0', const=True)


class LicenseItem3(BaseModel):
    alternateName: str = Field('CC-BY-NC-SA-4.0', const=True)


class LicenseItem4(BaseModel):
    alternateName: str = Field('CC0-1.0', const=True)


class License(BaseModel):
    __root__: Union[
        LicenseItem, LicenseItem1, LicenseItem2, LicenseItem3, LicenseItem4
    ] = Field(..., title='License')


class RecordFile(BaseModel):
    checkum: Optional[str] = None
    description: Optional[str] = None
    format: Optional[str] = None
    name: Optional[str] = None
    position: Optional[int] = None
    serverName: Optional[str] = None
    size: Optional[int] = None
    uploadDate: Optional[str] = None


class Identifier1(BaseModel):
    scheme: str = Field('DOI', const=True)
    identifier: str = Field(
        ...,
        description="Enter most relevant publication DOI(s). e.g. '10.016/j.epsl.2009.11.018'",
        title='Publication DOI',
    )


class Identifier2(BaseModel):
    scheme: str = Field('IGSN', const=True)
    identifier: Optional[str] = Field(
        None,
        description='Provide IGSNs for your samples separated by commas.',
        title='IGSN',
    )


class Identifier3(BaseModel):
    scheme: str = Field('OCDOI', const=True)
    identifier: Optional[str] = Field(
        None,
        description='Provide Cruise DOIs corresponding to your samples.',
        title='Cruise DOI',
    )


class Identifier4(BaseModel):
    scheme: str = Field('VNum', const=True)
    identifier: Optional[str] = Field(
        None,
        description='Provide volcano numbers corresponding to your sample collection site.',
        title='Smithsonian Volcano Number',
    )


class RelatedResource(BaseModel):
    identifiers: List[
        Union[Identifier1, Identifier2, Identifier3, Identifier4]
    ] = Field(..., title='Related Information')


class Coverage1(Enum):
    Global = 'Global'
    Regional__Continents__Oceans_ = 'Regional (Continents, Oceans)'
    Space_Planetary = 'Space/Planetary'


class SpatialCoverage1(BaseModel):
    coverage: Coverage1 = Field(..., title='Spatial Coverage')
    keywords: Optional[List[str]] = Field(
        None,
        description='Provide appropriate geographic keywords for searches. (e.g. Pacific Ocean, Aleutian Islands)',
        title='Geographic Keywords',
    )


class LeadAuthor(BaseModel):
    givenName: str = Field(..., title='First Name')
    additionalName: Optional[str] = Field(None, title='Middle Name')
    familyName: str = Field(..., title='Last Name')
    email: EmailStr
    identifiers: Optional[List[AuthorIdentifier]] = []


class Affiliation(BaseModel):
    name: Optional[str] = None
    identifiers: Optional[List[Identifier]] = None


class Contributor(BaseModel):
    givenName: str = Field(..., title='First Name')
    additionalName: Optional[str] = Field(None, title='Middle Name')
    familyName: str = Field(..., title='Last Name')
    email: Optional[EmailStr] = None
    identifiers: Optional[List[AuthorIdentifier]] = None


class Feature(BaseModel):
    type: Optional[str] = None
    geometry: Optional[Geometry] = None


class Record(BaseModel):
    title: str = Field(
        ..., description='A descriptive title of the dataset', title='Dataset Title'
    )
    datePublished: date = Field(
        ...,
        description='The date of the files contained in the resource to be allowed for downloading',
        title='Release Date',
    )
    description: str = Field(
        ...,
        description='Describe measurements, location, and purpose of the dataset',
        title='Abstract or Description',
    )
    community: str = Field('CZNet', const=True, title='Community')
    leadAuthor: LeadAuthor = Field(..., title='Lead Author')
    contributors: Optional[List[Contributor]] = Field(
        None, max_items=3, title='Co-Authors'
    )
    type: Type = Field(
        ..., description='The nature or genre of the resource', title='Dataset Type'
    )
    status: Status = Field(
        ...,
        description='Indication of the progress status of the resource.',
        title='Submission status',
    )
    additionalTypes: List[AdditionalType] = Field(
        ...,
        description='The science domain of the content',
        title='Data Types',
        unique_items=True,
    )
    keywords: List[str] = Field(
        ...,
        description='A list of non-geographic keywords. (e.g. volatiles, ultra-slow spreading ridges, mantle melting, CO2 fluxes)',
        min_items=2,
        title='Keywords',
    )
    language: Optional[str] = None
    spatialCoverage: SpatialCoverage = Field(..., title='Spatial Coverage Information')
    relatedResources: Optional[List[RelatedResource]] = Field(
        None, title='Related Resources'
    )
    fundings: Optional[
        List[
            Union[
                Union[
                    Funding,
                    Funding1,
                    Funding2,
                    Funding3,
                    Funding4,
                    Funding5,
                    Funding6,
                    Funding7,
                    Funding8,
                    Funding9,
                ],
                Funding10,
            ]
        ]
    ] = Field(
        None,
        description='Source of grants/awards which have funded the resource',
        title='Funding Source',
    )
    license: Optional[License] = None
