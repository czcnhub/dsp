# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2022-05-04T15:54:12+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, EmailStr, Field, constr


class Type(Enum):
    Collection = 'Collection'
    Dataset = 'Dataset'
    Image = 'Image'
    InteractiveResource = 'InteractiveResource'
    MovingImage = 'MovingImage'
    PhysicalObject = 'PhysicalObject'
    Service = 'Service'
    Software = 'Software'
    Sound = 'Sound'
    StillImage = 'StillImage'
    Text = 'Text'


class AdditionalType(Enum):
    Chemistry = 'Chemistry'
    Chemistry_ClumpedIsotope = 'Chemistry:ClumpedIsotope'
    Chemistry_Fluid = 'Chemistry:Fluid'
    Chemistry_Gas = 'Chemistry:Gas'
    Chemistry_Rock = 'Chemistry:Rock'
    Chemistry_Sediment = 'Chemistry:Sediment'
    Geochronology = 'Geochronology'
    Kinetics = 'Kinetics'
    ModelData = 'ModelData'
    Petrography = 'Petrography'
    Petrology = 'Petrology'
    Petrology_Experimental = 'Petrology:Experimental'
    Petrology_Mineral = 'Petrology:Mineral'
    SampleInfo = 'SampleInfo'
    SocialScience = 'SocialScience'
    Other = 'Other'


class Type1(Enum):
    leadAuthor = 'leadAuthor'
    coAuthor = 'coAuthor'


class Cordinate(BaseModel):
    lat: Optional[float] = None
    lon: Optional[float] = None
    alt: Optional[float] = None


class FileResponse(BaseModel):
    fileName: Optional[str] = None
    message: Optional[str] = None


class Type2(Enum):
    Point = 'Point'
    LineString = 'LineString'
    Polygon = 'Polygon'


class Geometry(BaseModel):
    type: Optional[Type2] = None
    cordinates: Optional[List[Cordinate]] = None


class Identifier(BaseModel):
    scheme: Optional[str] = None
    schemeURI: Optional[str] = None
    identifier: Optional[str] = None
    url: Optional[str] = None


class License(BaseModel):
    name: Optional[str] = None
    alternateName: Optional[str] = None
    identifiers: Optional[List[Identifier]] = None


class RecordFile(BaseModel):
    checkum: Optional[str] = None
    description: Optional[str] = None
    format: Optional[str] = None
    name: Optional[str] = None
    position: Optional[int] = None
    serverName: Optional[str] = None
    size: Optional[int] = None
    uploadDate: Optional[str] = None


class Relation(Enum):
    isCitedBy = 'isCitedBy'
    cites = 'cites'
    isSupplementTo = 'isSupplementTo'
    isSupplementedBy = 'isSupplementedBy'
    isContinuedBy = 'isContinuedBy'
    continues = 'continues'
    isDescribedBy = 'isDescribedBy'
    describes = 'describes'
    hasMetadata = 'hasMetadata'
    isMetadataFor = 'isMetadataFor'
    isNewVersionOf = 'isNewVersionOf'
    isPreviousVersionOf = 'isPreviousVersionOf'
    isPartOf = 'isPartOf'
    hasPart = 'hasPart'
    isReferencedBy = 'isReferencedBy'
    references = 'references'
    isDocumentedBy = 'isDocumentedBy'
    documents = 'documents'
    isCompiledBy = 'isCompiledBy'
    compiles = 'compiles'
    isVariantFormOf = 'isVariantFormOf'
    isOrignialFormOf = 'isOrignialFormOf'
    isIdenticalTo = 'isIdenticalTo'
    isReviewedBy = 'isReviewedBy'
    reviews = 'reviews'
    isDerivedFrom = 'isDerivedFrom'
    isSourceOf = 'isSourceOf'
    requires = 'requires'
    isRequiredBy = 'isRequiredBy'
    isObsoletedBy = 'isObsoletedBy'
    obsoletes = 'obsoletes'
    isPublishedIn = 'isPublishedIn'


class RelatedResource(BaseModel):
    bibliographicCitation: Optional[str] = None
    identifiers: Optional[List[Identifier]] = None
    relation: Optional[Relation] = None


class Coverage(Enum):
    Global = 'Global'
    Regional__Continents__Oceans_ = 'Regional (Continents, Oceans)'
    Space_Planetary = 'Space/Planetary'


class Affiliation(BaseModel):
    name: Optional[str] = None
    identifiers: Optional[List[Identifier]] = None


class Contributor(BaseModel):
    familyName: str
    additionalName: Optional[str] = None
    givenName: str
    email: Optional[EmailStr] = None
    type: Optional[Type1] = None
    identifiers: Optional[List[Identifier]] = None
    affiliation: Optional[Affiliation] = None


class Feature(BaseModel):
    type: Optional[str] = None
    geometry: Optional[Geometry] = None


class Funder(BaseModel):
    name: Optional[str] = None
    alternateName: Optional[str] = None
    identifiers: Optional[List[Identifier]] = None


class Funding(BaseModel):
    identifier: Optional[str] = None
    funder: Optional[Funder] = Field(None, title='Funder')
    url: Optional[AnyUrl] = None


class SpatialCoverage(BaseModel):
    coverage: Coverage = Field(..., title='Spatial Coverage')
    keywords: Optional[List[str]] = Field(
        None,
        description='Provide appropriate geographic keywords for searches. (e.g. Pacific Ocean, Aleutian Islands)',
        title='Geographic Keywords',
    )
    features: Optional[List[Feature]] = None


class Record(BaseModel):
    title: str = Field(..., description='A descriptive title of the dataset', title='Dataset Title')
    description: constr(max_length=250) = Field(
        ...,
        description='Describe measurements, location, and purpose of the dataset',
        title='Abstract or Description',
    )
    community: str = Field(..., title='Community')
    identifiers: Optional[List[Identifier]] = Field(None, title='Related Information')
    contributors: Optional[List[Contributor]] = Field(None, title='Co-Authors')
    type: Type = Field(..., title='Dataset Type')
    status: Optional[str] = None
    additionalTypes: List[AdditionalType] = Field(..., title='Data Types', unique_items=True)
    keywords: List[str] = Field(
        ...,
        description='A list of non-geographic keywords. (e.g. volatiles, ultra-slow spreading ridges, mantle melting, CO2 fluxes)',
        min_items=2,
        title='Keywords',
    )
    language: Optional[str] = None
    spatialCoverage: SpatialCoverage
    relatedResources: Optional[List[RelatedResource]] = None
    fundings: Optional[List[Funding]] = None
    license: Optional[License] = None
